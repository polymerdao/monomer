// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rollup/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ApplyL1TxsRequest defines a message for all L1 system and user deposit txs
type ApplyL1TxsRequest struct {
	// Array of bytes where each bytes is a eth.Transaction.MarshalBinary tx.
	// The first tx must be the L1 system deposit tx, and the rest are user txs if present.
	TxBytes     [][]byte `protobuf:"bytes,1,rep,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	FromAddress string   `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *ApplyL1TxsRequest) Reset()         { *m = ApplyL1TxsRequest{} }
func (m *ApplyL1TxsRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyL1TxsRequest) ProtoMessage()    {}
func (*ApplyL1TxsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_106533843870de0f, []int{0}
}
func (m *ApplyL1TxsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyL1TxsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyL1TxsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyL1TxsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyL1TxsRequest.Merge(m, src)
}
func (m *ApplyL1TxsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplyL1TxsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyL1TxsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyL1TxsRequest proto.InternalMessageInfo

func (m *ApplyL1TxsRequest) GetTxBytes() [][]byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

func (m *ApplyL1TxsRequest) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type ApplyL1TxsResponse struct {
}

func (m *ApplyL1TxsResponse) Reset()         { *m = ApplyL1TxsResponse{} }
func (m *ApplyL1TxsResponse) String() string { return proto.CompactTextString(m) }
func (*ApplyL1TxsResponse) ProtoMessage()    {}
func (*ApplyL1TxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_106533843870de0f, []int{1}
}
func (m *ApplyL1TxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyL1TxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyL1TxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyL1TxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyL1TxsResponse.Merge(m, src)
}
func (m *ApplyL1TxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplyL1TxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyL1TxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyL1TxsResponse proto.InternalMessageInfo

// InitiateWithdrawalRequest defines a message for all L2 withdrawal txs
type InitiateWithdrawalRequest struct {
	// The cosmos address of the user who wants to withdraw from L2.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// The ethereum address on L1 that the user wants to withdraw to.
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// The amount of ETH (in wei) that the user wants to withdraw.
	Value cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=value,proto3,customtype=cosmossdk.io/math.Int" json:"value"`
	// Minimum gas limit for executing the message on L1.
	GasLimit []byte `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Data to forward to L1 target.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *InitiateWithdrawalRequest) Reset()         { *m = InitiateWithdrawalRequest{} }
func (m *InitiateWithdrawalRequest) String() string { return proto.CompactTextString(m) }
func (*InitiateWithdrawalRequest) ProtoMessage()    {}
func (*InitiateWithdrawalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_106533843870de0f, []int{2}
}
func (m *InitiateWithdrawalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitiateWithdrawalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitiateWithdrawalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitiateWithdrawalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateWithdrawalRequest.Merge(m, src)
}
func (m *InitiateWithdrawalRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitiateWithdrawalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateWithdrawalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateWithdrawalRequest proto.InternalMessageInfo

func (m *InitiateWithdrawalRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InitiateWithdrawalRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *InitiateWithdrawalRequest) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *InitiateWithdrawalRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type InitiateWithdrawalResponse struct {
}

func (m *InitiateWithdrawalResponse) Reset()         { *m = InitiateWithdrawalResponse{} }
func (m *InitiateWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*InitiateWithdrawalResponse) ProtoMessage()    {}
func (*InitiateWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_106533843870de0f, []int{3}
}
func (m *InitiateWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitiateWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitiateWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitiateWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateWithdrawalResponse.Merge(m, src)
}
func (m *InitiateWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitiateWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateWithdrawalResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ApplyL1TxsRequest)(nil), "rollup.v1.ApplyL1TxsRequest")
	proto.RegisterType((*ApplyL1TxsResponse)(nil), "rollup.v1.ApplyL1TxsResponse")
	proto.RegisterType((*InitiateWithdrawalRequest)(nil), "rollup.v1.InitiateWithdrawalRequest")
	proto.RegisterType((*InitiateWithdrawalResponse)(nil), "rollup.v1.InitiateWithdrawalResponse")
}

func init() { proto.RegisterFile("rollup/v1/tx.proto", fileDescriptor_106533843870de0f) }

var fileDescriptor_106533843870de0f = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0x8e, 0x69, 0x1b, 0x1a, 0x37, 0x4b, 0xac, 0x00, 0x97, 0xa3, 0x5c, 0x43, 0x04, 0x52, 0x54,
	0xd1, 0x73, 0x03, 0x5b, 0xb7, 0x66, 0xa8, 0x14, 0xa9, 0x2c, 0x57, 0x24, 0x24, 0x96, 0xc8, 0xc9,
	0x19, 0xc7, 0xe2, 0x7c, 0x3e, 0x6c, 0x27, 0x5c, 0x56, 0x7e, 0x01, 0x3f, 0x83, 0xb1, 0x43, 0x27,
	0x7e, 0x41, 0xc7, 0xaa, 0x13, 0x62, 0xa8, 0x50, 0x32, 0x74, 0xe0, 0x4f, 0xa0, 0x3b, 0x1b, 0x28,
	0x2a, 0x11, 0x8b, 0xe5, 0xef, 0xfb, 0xde, 0x7b, 0xdf, 0xf3, 0xf3, 0x83, 0x48, 0xc9, 0x24, 0x99,
	0x66, 0x78, 0xd6, 0xc3, 0x26, 0x0f, 0x33, 0x25, 0x8d, 0x44, 0x35, 0xcb, 0x85, 0xb3, 0x9e, 0xdf,
	0x20, 0x82, 0xa7, 0x12, 0x97, 0xa7, 0x55, 0xfd, 0x07, 0x63, 0xa9, 0x85, 0xd4, 0x58, 0x68, 0x56,
	0x64, 0x09, 0xcd, 0x9c, 0xd0, 0xb2, 0xc2, 0xb0, 0x44, 0xd8, 0x02, 0x27, 0x35, 0x99, 0x64, 0xd2,
	0xf2, 0xc5, 0xcd, 0xb2, 0x9d, 0x18, 0x36, 0x0e, 0xb3, 0x2c, 0x99, 0x1f, 0xf7, 0x5e, 0xe5, 0x3a,
	0xa2, 0xef, 0xa7, 0x54, 0x1b, 0xd4, 0x82, 0x9b, 0x26, 0x1f, 0x8e, 0xe6, 0x86, 0x6a, 0x0f, 0xb4,
	0xd7, 0xba, 0xf5, 0xe8, 0xae, 0xc9, 0xfb, 0x05, 0x44, 0x8f, 0x61, 0xfd, 0xad, 0x92, 0x62, 0x48,
	0xe2, 0x58, 0x51, 0xad, 0xbd, 0x3b, 0x6d, 0xd0, 0xad, 0x45, 0x5b, 0x05, 0x77, 0x68, 0xa9, 0x83,
	0xc6, 0xc7, 0xeb, 0xd3, 0xdd, 0xbf, 0xa2, 0x3a, 0x4d, 0x88, 0x6e, 0xba, 0xe8, 0x4c, 0xa6, 0x9a,
	0x76, 0x7e, 0x00, 0xd8, 0x1a, 0xa4, 0xdc, 0x70, 0x62, 0xe8, 0x6b, 0x6e, 0x26, 0xb1, 0x22, 0x1f,
	0x48, 0xf2, 0xab, 0x89, 0x7d, 0x58, 0xd5, 0x34, 0x8d, 0xa9, 0xf2, 0x40, 0xe1, 0xd1, 0xf7, 0x2e,
	0xcf, 0xf6, 0x9a, 0xee, 0x45, 0xce, 0xea, 0xc4, 0x28, 0x9e, 0xb2, 0xc8, 0xc5, 0xa1, 0xfb, 0xb0,
	0x6a, 0x88, 0x62, 0xd4, 0xb8, 0xae, 0x1c, 0x42, 0x47, 0x70, 0x63, 0x46, 0x92, 0x29, 0xf5, 0xd6,
	0xca, 0x42, 0xfb, 0xe7, 0x57, 0x3b, 0x95, 0x6f, 0x57, 0x3b, 0xf7, 0x6c, 0x31, 0x1d, 0xbf, 0x0b,
	0xb9, 0xc4, 0x82, 0x98, 0x49, 0x38, 0x48, 0xcd, 0xe5, 0xd9, 0x1e, 0x74, 0x2e, 0x83, 0xd4, 0x7c,
	0xbe, 0x3e, 0xdd, 0x05, 0x91, 0x4d, 0x47, 0x0f, 0x61, 0x8d, 0x11, 0x3d, 0x4c, 0xb8, 0xe0, 0xc6,
	0x5b, 0x6f, 0x83, 0x6e, 0x3d, 0xda, 0x64, 0x44, 0x1f, 0x17, 0x18, 0x21, 0xb8, 0x1e, 0x13, 0x43,
	0xbc, 0x8d, 0x92, 0x2f, 0xef, 0x07, 0x5b, 0xc5, 0x24, 0x5c, 0x77, 0x9d, 0x6d, 0xe8, 0xff, 0xeb,
	0xb1, 0x76, 0x16, 0xcf, 0xbf, 0x00, 0x08, 0x5f, 0x6a, 0x76, 0x42, 0xd5, 0x8c, 0x8f, 0x29, 0x1a,
	0x40, 0xf8, 0x67, 0x60, 0x68, 0x3b, 0xfc, 0xbd, 0x0d, 0xe1, 0xad, 0xdf, 0xf2, 0x1f, 0xad, 0x50,
	0x6d, 0x65, 0x44, 0x20, 0xba, 0xed, 0x8b, 0x9e, 0xdc, 0x48, 0x5a, 0xf9, 0x07, 0xfe, 0xd3, 0xff,
	0x44, 0x59, 0x8b, 0xfe, 0xd1, 0xf9, 0x22, 0x00, 0x17, 0x8b, 0x00, 0x7c, 0x5f, 0x04, 0xe0, 0xd3,
	0x32, 0xa8, 0x5c, 0x2c, 0x83, 0xca, 0xd7, 0x65, 0x50, 0x79, 0xf3, 0x8c, 0x71, 0x33, 0x99, 0x8e,
	0xc2, 0xb1, 0x14, 0x38, 0x93, 0xc9, 0x5c, 0x50, 0x15, 0x13, 0x89, 0x85, 0x4c, 0xa5, 0xa0, 0x0a,
	0xe7, 0xd8, 0xad, 0xbe, 0x99, 0x67, 0x54, 0x8f, 0xaa, 0xe5, 0x4e, 0xbe, 0xf8, 0x19, 0x00, 0x00,
	0xff, 0xff, 0xee, 0x34, 0x5a, 0x78, 0x11, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgServiceClient is the client API for MsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgServiceClient interface {
	ApplyL1Txs(ctx context.Context, in *ApplyL1TxsRequest, opts ...grpc.CallOption) (*ApplyL1TxsResponse, error)
	InitiateWithdrawal(ctx context.Context, in *InitiateWithdrawalRequest, opts ...grpc.CallOption) (*InitiateWithdrawalResponse, error)
}

type msgServiceClient struct {
	cc grpc1.ClientConn
}

func NewMsgServiceClient(cc grpc1.ClientConn) MsgServiceClient {
	return &msgServiceClient{cc}
}

func (c *msgServiceClient) ApplyL1Txs(ctx context.Context, in *ApplyL1TxsRequest, opts ...grpc.CallOption) (*ApplyL1TxsResponse, error) {
	out := new(ApplyL1TxsResponse)
	err := c.cc.Invoke(ctx, "/rollup.v1.MsgService/ApplyL1Txs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgServiceClient) InitiateWithdrawal(ctx context.Context, in *InitiateWithdrawalRequest, opts ...grpc.CallOption) (*InitiateWithdrawalResponse, error) {
	out := new(InitiateWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/rollup.v1.MsgService/InitiateWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServiceServer is the server API for MsgService service.
type MsgServiceServer interface {
	ApplyL1Txs(context.Context, *ApplyL1TxsRequest) (*ApplyL1TxsResponse, error)
	InitiateWithdrawal(context.Context, *InitiateWithdrawalRequest) (*InitiateWithdrawalResponse, error)
}

// UnimplementedMsgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServiceServer struct {
}

func (*UnimplementedMsgServiceServer) ApplyL1Txs(ctx context.Context, req *ApplyL1TxsRequest) (*ApplyL1TxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyL1Txs not implemented")
}
func (*UnimplementedMsgServiceServer) InitiateWithdrawal(ctx context.Context, req *InitiateWithdrawalRequest) (*InitiateWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateWithdrawal not implemented")
}

func RegisterMsgServiceServer(s grpc1.Server, srv MsgServiceServer) {
	s.RegisterService(&_MsgService_serviceDesc, srv)
}

func _MsgService_ApplyL1Txs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyL1TxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).ApplyL1Txs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollup.v1.MsgService/ApplyL1Txs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).ApplyL1Txs(ctx, req.(*ApplyL1TxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgService_InitiateWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServiceServer).InitiateWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollup.v1.MsgService/InitiateWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServiceServer).InitiateWithdrawal(ctx, req.(*InitiateWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rollup.v1.MsgService",
	HandlerType: (*MsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyL1Txs",
			Handler:    _MsgService_ApplyL1Txs_Handler,
		},
		{
			MethodName: "InitiateWithdrawal",
			Handler:    _MsgService_InitiateWithdrawal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rollup/v1/tx.proto",
}

func (m *ApplyL1TxsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyL1TxsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyL1TxsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxBytes) > 0 {
		for iNdEx := len(m.TxBytes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxBytes[iNdEx])
			copy(dAtA[i:], m.TxBytes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TxBytes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApplyL1TxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyL1TxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyL1TxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InitiateWithdrawalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitiateWithdrawalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitiateWithdrawalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitiateWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitiateWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitiateWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApplyL1TxsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxBytes) > 0 {
		for _, b := range m.TxBytes {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *ApplyL1TxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitiateWithdrawalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *InitiateWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApplyL1TxsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyL1TxsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyL1TxsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = append(m.TxBytes, make([]byte, postIndex-iNdEx))
			copy(m.TxBytes[len(m.TxBytes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyL1TxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyL1TxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyL1TxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateWithdrawalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateWithdrawalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateWithdrawalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = append(m.GasLimit[:0], dAtA[iNdEx:postIndex]...)
			if m.GasLimit == nil {
				m.GasLimit = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
