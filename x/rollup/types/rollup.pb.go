// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rollup/v1/rollup.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the genesis parameters for the rollup module.
type Params struct {
	// L1 address to forward the L2 fees to.
	L1FeeRecipient string `protobuf:"bytes,1,opt,name=l1_fee_recipient,json=l1FeeRecipient,proto3" json:"l1_fee_recipient,omitempty"`
	// L1 address of the cross-domain messenger contract.
	L1CrossDomainMessenger string `protobuf:"bytes,2,opt,name=l1_cross_domain_messenger,json=l1CrossDomainMessenger,proto3" json:"l1_cross_domain_messenger,omitempty"`
	// Minimum amount of L2 fees that the FeeCollector account must have before they can be withdrawn.
	MinFeeWithdrawalAmount uint64 `protobuf:"varint,3,opt,name=min_fee_withdrawal_amount,json=minFeeWithdrawalAmount,proto3" json:"min_fee_withdrawal_amount,omitempty"`
	// L1 gas limit for withdrawing fees to the L1 recipient address.
	FeeWithdrawalGasLimit uint64 `protobuf:"varint,4,opt,name=fee_withdrawal_gas_limit,json=feeWithdrawalGasLimit,proto3" json:"fee_withdrawal_gas_limit,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_b51d0d5c8e6e30d5, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetL1FeeRecipient() string {
	if m != nil {
		return m.L1FeeRecipient
	}
	return ""
}

func (m *Params) GetL1CrossDomainMessenger() string {
	if m != nil {
		return m.L1CrossDomainMessenger
	}
	return ""
}

func (m *Params) GetMinFeeWithdrawalAmount() uint64 {
	if m != nil {
		return m.MinFeeWithdrawalAmount
	}
	return 0
}

func (m *Params) GetFeeWithdrawalGasLimit() uint64 {
	if m != nil {
		return m.FeeWithdrawalGasLimit
	}
	return 0
}

// L1BlockInfo represents information about an L1 block and associated L2 data.
type L1BlockInfo struct {
	Number            uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Time              uint64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	BaseFee           []byte `protobuf:"bytes,3,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	BlockHash         []byte `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	SequenceNumber    uint64 `protobuf:"varint,5,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	BatcherAddr       []byte `protobuf:"bytes,6,opt,name=batcher_addr,json=batcherAddr,proto3" json:"batcher_addr,omitempty"`
	L1FeeOverhead     []byte `protobuf:"bytes,7,opt,name=l1_fee_overhead,json=l1FeeOverhead,proto3" json:"l1_fee_overhead,omitempty"`
	L1FeeScalar       []byte `protobuf:"bytes,8,opt,name=l1_fee_scalar,json=l1FeeScalar,proto3" json:"l1_fee_scalar,omitempty"`
	BlobBaseFee       []byte `protobuf:"bytes,9,opt,name=blob_base_fee,json=blobBaseFee,proto3" json:"blob_base_fee,omitempty"`
	BaseFeeScalar     uint32 `protobuf:"varint,10,opt,name=base_fee_scalar,json=baseFeeScalar,proto3" json:"base_fee_scalar,omitempty"`
	BlobBaseFeeScalar uint32 `protobuf:"varint,11,opt,name=blob_base_fee_scalar,json=blobBaseFeeScalar,proto3" json:"blob_base_fee_scalar,omitempty"`
}

func (m *L1BlockInfo) Reset()         { *m = L1BlockInfo{} }
func (m *L1BlockInfo) String() string { return proto.CompactTextString(m) }
func (*L1BlockInfo) ProtoMessage()    {}
func (*L1BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b51d0d5c8e6e30d5, []int{1}
}
func (m *L1BlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L1BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L1BlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L1BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L1BlockInfo.Merge(m, src)
}
func (m *L1BlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *L1BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_L1BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_L1BlockInfo proto.InternalMessageInfo

func (m *L1BlockInfo) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *L1BlockInfo) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *L1BlockInfo) GetBaseFee() []byte {
	if m != nil {
		return m.BaseFee
	}
	return nil
}

func (m *L1BlockInfo) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *L1BlockInfo) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *L1BlockInfo) GetBatcherAddr() []byte {
	if m != nil {
		return m.BatcherAddr
	}
	return nil
}

func (m *L1BlockInfo) GetL1FeeOverhead() []byte {
	if m != nil {
		return m.L1FeeOverhead
	}
	return nil
}

func (m *L1BlockInfo) GetL1FeeScalar() []byte {
	if m != nil {
		return m.L1FeeScalar
	}
	return nil
}

func (m *L1BlockInfo) GetBlobBaseFee() []byte {
	if m != nil {
		return m.BlobBaseFee
	}
	return nil
}

func (m *L1BlockInfo) GetBaseFeeScalar() uint32 {
	if m != nil {
		return m.BaseFeeScalar
	}
	return 0
}

func (m *L1BlockInfo) GetBlobBaseFeeScalar() uint32 {
	if m != nil {
		return m.BlobBaseFeeScalar
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "rollup.v1.Params")
	proto.RegisterType((*L1BlockInfo)(nil), "rollup.v1.L1BlockInfo")
}

func init() { proto.RegisterFile("rollup/v1/rollup.proto", fileDescriptor_b51d0d5c8e6e30d5) }

var fileDescriptor_b51d0d5c8e6e30d5 = []byte{
	// 499 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x6f, 0x58, 0xe8, 0x56, 0xb7, 0x5d, 0xc1, 0x1a, 0x55, 0x40, 0x22, 0x2b, 0x3d, 0x8c, 0x1e,
	0xd0, 0xa2, 0x88, 0x03, 0xe2, 0xb8, 0x82, 0x0a, 0x48, 0xe3, 0x8f, 0xc2, 0x01, 0x89, 0x8b, 0xe5,
	0x24, 0xaf, 0x4d, 0x84, 0x1d, 0x17, 0x3b, 0xed, 0xd8, 0xb7, 0xe0, 0xc0, 0x87, 0xda, 0x71, 0x47,
	0x4e, 0x08, 0xda, 0x2f, 0x82, 0xf2, 0xe2, 0x4c, 0x85, 0xdb, 0xf3, 0xef, 0xdf, 0x7b, 0xcf, 0x36,
	0x19, 0x6a, 0x25, 0xc4, 0x6a, 0x19, 0xac, 0xc3, 0xa0, 0xae, 0x4e, 0x97, 0x5a, 0x95, 0x8a, 0x76,
	0xec, 0x69, 0x1d, 0x3e, 0x38, 0x5a, 0xa8, 0x85, 0x42, 0x34, 0xa8, 0xaa, 0x5a, 0x30, 0xfe, 0xe3,
	0x90, 0xf6, 0x07, 0xae, 0xb9, 0x34, 0x74, 0x42, 0xee, 0x88, 0x90, 0xcd, 0x01, 0x98, 0x86, 0x24,
	0x5f, 0xe6, 0x50, 0x94, 0x9e, 0x33, 0x72, 0x26, 0x9d, 0xe8, 0x50, 0x84, 0x33, 0x80, 0xa8, 0x41,
	0xe9, 0x73, 0x72, 0x5f, 0x84, 0x2c, 0xd1, 0xca, 0x18, 0x96, 0x2a, 0xc9, 0xf3, 0x82, 0x49, 0x30,
	0x06, 0x8a, 0x05, 0x68, 0xef, 0x16, 0x5a, 0x86, 0x22, 0x7c, 0x51, 0xf1, 0x2f, 0x91, 0x7e, 0xdb,
	0xb0, 0x95, 0x55, 0xe6, 0x05, 0x76, 0xb9, 0xc8, 0xcb, 0x2c, 0xd5, 0xfc, 0x82, 0x0b, 0xc6, 0xa5,
	0x5a, 0x15, 0xa5, 0xb7, 0x37, 0x72, 0x26, 0x6e, 0x34, 0x94, 0x79, 0x31, 0x03, 0xf8, 0x74, 0x43,
	0x9f, 0x21, 0x4b, 0x9f, 0x11, 0xef, 0x3f, 0xdb, 0x82, 0x1b, 0x26, 0x72, 0x99, 0x97, 0x9e, 0x8b,
	0xce, 0x7b, 0xf3, 0x5d, 0xdb, 0x2b, 0x6e, 0xce, 0x2b, 0x72, 0xfc, 0x63, 0x8f, 0x74, 0xcf, 0xc3,
	0xa9, 0x50, 0xc9, 0x97, 0x37, 0xc5, 0x5c, 0xd1, 0x21, 0x69, 0x17, 0x2b, 0x19, 0x83, 0xc6, 0xf5,
	0xdc, 0xc8, 0x9e, 0x28, 0x25, 0x6e, 0x99, 0x4b, 0xc0, 0x0d, 0xdc, 0x08, 0x6b, 0x7a, 0x4c, 0x0e,
	0x62, 0x6e, 0xa0, 0x1a, 0x18, 0xc7, 0xeb, 0x4d, 0xdd, 0xab, 0x5f, 0xc7, 0x4e, 0xb4, 0x5f, 0xa1,
	0x33, 0x00, 0xfa, 0x90, 0x90, 0xb8, 0x4a, 0x66, 0x19, 0x37, 0x19, 0xce, 0xd1, 0x8b, 0x3a, 0x88,
	0xbc, 0xe6, 0x26, 0xa3, 0x8f, 0xc9, 0xc0, 0xc0, 0xd7, 0x15, 0x14, 0x09, 0x30, 0xdb, 0xf4, 0x36,
	0xc6, 0x1f, 0x36, 0xf0, 0xbb, 0xba, 0xf9, 0x23, 0xd2, 0x8b, 0x79, 0x99, 0x64, 0xa0, 0x19, 0x4f,
	0x53, 0xed, 0xb5, 0x31, 0xa9, 0x6b, 0xb1, 0xb3, 0x34, 0xd5, 0xf4, 0x84, 0x0c, 0xec, 0x03, 0xa9,
	0x35, 0xe8, 0x0c, 0x78, 0xea, 0xed, 0xa3, 0xaa, 0x8f, 0xef, 0xf3, 0xde, 0x82, 0x74, 0x4c, 0xfa,
	0x56, 0x67, 0x12, 0x2e, 0xb8, 0xf6, 0x0e, 0xea, 0x2c, 0x54, 0x7d, 0x44, 0x88, 0x4e, 0x48, 0x3f,
	0x16, 0x2a, 0x66, 0x37, 0xcb, 0x75, 0x76, 0x96, 0xeb, 0x56, 0xd4, 0xd4, 0x2e, 0x78, 0x42, 0x06,
	0x8d, 0xa8, 0xc9, 0x23, 0x23, 0x67, 0xd2, 0x8f, 0xfa, 0xf6, 0x0a, 0x6c, 0x62, 0x40, 0x8e, 0xfe,
	0x49, 0x6c, 0xc4, 0x5d, 0x14, 0xdf, 0xdd, 0x89, 0xac, 0x0d, 0xd3, 0xd9, 0xd5, 0xc6, 0x77, 0xae,
	0x37, 0xbe, 0xf3, 0x7b, 0xe3, 0x3b, 0xdf, 0xb7, 0x7e, 0xeb, 0x7a, 0xeb, 0xb7, 0x7e, 0x6e, 0xfd,
	0xd6, 0xe7, 0x27, 0x8b, 0xbc, 0xcc, 0x56, 0xf1, 0x69, 0xa2, 0x64, 0xb0, 0x54, 0xe2, 0x52, 0x82,
	0x4e, 0xb9, 0x0a, 0xa4, 0x2a, 0x94, 0x04, 0x1d, 0x7c, 0xb3, 0x7f, 0x3c, 0x28, 0x2f, 0x97, 0x60,
	0xe2, 0x36, 0xfe, 0xe4, 0xa7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xdd, 0x12, 0x17, 0x04,
	0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeWithdrawalGasLimit != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.FeeWithdrawalGasLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.MinFeeWithdrawalAmount != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.MinFeeWithdrawalAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.L1CrossDomainMessenger) > 0 {
		i -= len(m.L1CrossDomainMessenger)
		copy(dAtA[i:], m.L1CrossDomainMessenger)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.L1CrossDomainMessenger)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.L1FeeRecipient) > 0 {
		i -= len(m.L1FeeRecipient)
		copy(dAtA[i:], m.L1FeeRecipient)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.L1FeeRecipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *L1BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L1BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L1BlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlobBaseFeeScalar != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.BlobBaseFeeScalar))
		i--
		dAtA[i] = 0x58
	}
	if m.BaseFeeScalar != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.BaseFeeScalar))
		i--
		dAtA[i] = 0x50
	}
	if len(m.BlobBaseFee) > 0 {
		i -= len(m.BlobBaseFee)
		copy(dAtA[i:], m.BlobBaseFee)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.BlobBaseFee)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.L1FeeScalar) > 0 {
		i -= len(m.L1FeeScalar)
		copy(dAtA[i:], m.L1FeeScalar)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.L1FeeScalar)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.L1FeeOverhead) > 0 {
		i -= len(m.L1FeeOverhead)
		copy(dAtA[i:], m.L1FeeOverhead)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.L1FeeOverhead)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BatcherAddr) > 0 {
		i -= len(m.BatcherAddr)
		copy(dAtA[i:], m.BatcherAddr)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.BatcherAddr)))
		i--
		dAtA[i] = 0x32
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BaseFee) > 0 {
		i -= len(m.BaseFee)
		copy(dAtA[i:], m.BaseFee)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.BaseFee)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Number != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollup(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.L1FeeRecipient)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.L1CrossDomainMessenger)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.MinFeeWithdrawalAmount != 0 {
		n += 1 + sovRollup(uint64(m.MinFeeWithdrawalAmount))
	}
	if m.FeeWithdrawalGasLimit != 0 {
		n += 1 + sovRollup(uint64(m.FeeWithdrawalGasLimit))
	}
	return n
}

func (m *L1BlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovRollup(uint64(m.Number))
	}
	if m.Time != 0 {
		n += 1 + sovRollup(uint64(m.Time))
	}
	l = len(m.BaseFee)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovRollup(uint64(m.SequenceNumber))
	}
	l = len(m.BatcherAddr)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.L1FeeOverhead)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.L1FeeScalar)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.BlobBaseFee)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.BaseFeeScalar != 0 {
		n += 1 + sovRollup(uint64(m.BaseFeeScalar))
	}
	if m.BlobBaseFeeScalar != 0 {
		n += 1 + sovRollup(uint64(m.BlobBaseFeeScalar))
	}
	return n
}

func sovRollup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollup(x uint64) (n int) {
	return sovRollup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1FeeRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1FeeRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1CrossDomainMessenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1CrossDomainMessenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFeeWithdrawalAmount", wireType)
			}
			m.MinFeeWithdrawalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFeeWithdrawalAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeWithdrawalGasLimit", wireType)
			}
			m.FeeWithdrawalGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeWithdrawalGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L1BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L1BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L1BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFee = append(m.BaseFee[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseFee == nil {
				m.BaseFee = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatcherAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatcherAddr = append(m.BatcherAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.BatcherAddr == nil {
				m.BatcherAddr = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1FeeOverhead", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1FeeOverhead = append(m.L1FeeOverhead[:0], dAtA[iNdEx:postIndex]...)
			if m.L1FeeOverhead == nil {
				m.L1FeeOverhead = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1FeeScalar", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1FeeScalar = append(m.L1FeeScalar[:0], dAtA[iNdEx:postIndex]...)
			if m.L1FeeScalar == nil {
				m.L1FeeScalar = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobBaseFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlobBaseFee = append(m.BlobBaseFee[:0], dAtA[iNdEx:postIndex]...)
			if m.BlobBaseFee == nil {
				m.BlobBaseFee = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeeScalar", wireType)
			}
			m.BaseFeeScalar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseFeeScalar |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobBaseFeeScalar", wireType)
			}
			m.BlobBaseFeeScalar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobBaseFeeScalar |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollup = fmt.Errorf("proto: unexpected end of group")
)
