syntax = "proto3";

package rollup.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "rollup/v1/rollup.proto";

option go_package = "github.com/polymerdao/monomer/x/rollup/types";

// Msg defines all tx endpoints for the x/rollup module.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // SetL1Attributes sets the l1 attributes in the L2 state.
  rpc SetL1Attributes(MsgSetL1Attributes) returns (MsgSetL1AttributesResponse);

  // ApplyUserDeposit defines a method for applying a user deposit tx.
  rpc ApplyUserDeposit(MsgApplyUserDeposit) returns (MsgApplyUserDepositResponse);

  // InitiateWithdrawal defines a method for initiating an ETH withdrawal from L2 to L1.
  rpc InitiateWithdrawal(MsgInitiateWithdrawal) returns (MsgInitiateWithdrawalResponse);

  // InitiateERC20Withdrawal defines a method for initiating an ERC-20 withdrawal from L2 to L1.
  rpc InitiateERC20Withdrawal(MsgInitiateERC20Withdrawal) returns (MsgInitiateERC20WithdrawalResponse);

  // InitiateFeeWithdrawal defines a method for initiating a withdrawal of fees from L2 to the L1 fee recipient address.
  rpc InitiateFeeWithdrawal(MsgInitiateFeeWithdrawal) returns (MsgInitiateFeeWithdrawalResponse);

  // UpdateParams defines a method for updating the x/rollup module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// DepositsTx is the Cosmos SDK transaction type that wraps OP Stack deposit transactions.
message DepositsTx {
  MsgSetL1Attributes l1_attributes = 1;
  repeated MsgApplyUserDeposit user_deposits = 2;
}

// MsgSetL1Attributes is the l1 attributes message.
message MsgSetL1Attributes {
  L1BlockInfo l1_block_info = 1;
  bytes eth_tx = 2;
}

// MsgSetL1AttributesResponse defines the SetL1Attributes response type.
message MsgSetL1AttributesResponse {}

// MsgApplyUserDeposit is a eth deposit tx.
message MsgApplyUserDeposit {
  // tx is the marshaled Ethereum Deposit tx.
  bytes tx = 1;
}

// MsgApplyUserDepositResponse defines the ApplyUserDeposit response type.
message MsgApplyUserDepositResponse {}

// MsgInitiateWithdrawal defines the message for initiating an L2 ETH withdrawal.
message MsgInitiateWithdrawal {
  option (cosmos.msg.v1.signer) = "sender";

  // The cosmos address of the user who wants to withdraw from L2.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The ethereum address on L1 that the user wants to withdraw to.
  string target = 2;
  // The amount of ETH (in wei) that the user wants to withdraw.
  string value = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // Minimum gas limit for executing the message on L1.
  bytes gas_limit = 4;
  // Data to forward to L1 target.
  bytes data = 5;
}

// MsgInitiateWithdrawalResponse defines the Msg/InitiateWithdrawal response type.
message MsgInitiateWithdrawalResponse {}

// MsgInitiateERC20Withdrawal defines the message for initiating an L2 ERC-20 withdrawal.
message MsgInitiateERC20Withdrawal {
  option (cosmos.msg.v1.signer) = "sender";

  // The cosmos address of the user who wants to withdraw from L2.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The ethereum address on L1 that the user wants to withdraw to.
  string target = 2;
  // The address of the ERC-20 token contract on L1.
  string token_address = 3;
  // The amount of ERC-20 tokens that the user wants to withdraw.
  string value = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // Minimum gas limit for executing the message on L1.
  bytes gas_limit = 5;
  // Extra data to forward to L1 target.
  bytes extra_data = 6;
}

// MsgInitiateERC20WithdrawalResponse defines the Msg/InitiateERC20Withdrawal response type.
message MsgInitiateERC20WithdrawalResponse {}

// MsgInitiateFeeWithdrawal defines the message for initiating an L2 fee withdrawal to the L1 fee recipient address.
message MsgInitiateFeeWithdrawal {
  option (cosmos.msg.v1.signer) = "sender";

  // The signer address of the user initiating the fee withdrawal.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgInitiateFeeWithdrawalResponse defines the Msg/InitiateFeeWithdrawal response type.
message MsgInitiateFeeWithdrawalResponse {}

// MsgUpdateParams defines a Msg for updating the x/rollup module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the admin account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/rollup parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the Msg/MsgUpdateParams response type.
message MsgUpdateParamsResponse {}
