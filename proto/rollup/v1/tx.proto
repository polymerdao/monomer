syntax = "proto3";

package rollup.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "rollup/v1/rollup.proto";

option go_package = "github.com/polymerdao/monomer/x/rollup/types";

// Msg defines all tx endpoints for the x/rollup module.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // ApplyL1Txs defines a method for applying applying all L1 system and user deposit txs.
  rpc ApplyL1Txs(MsgApplyL1Txs) returns (MsgApplyL1TxsResponse);

  // InitiateWithdrawal defines a method for initiating a withdrawal from L2 to L1.
  rpc InitiateWithdrawal(MsgInitiateWithdrawal) returns (MsgInitiateWithdrawalResponse);

  // InitiateFeeWithdrawal defines a method for initiating a withdrawal of fees from L2 to the L1 fee recipient address.
  rpc InitiateFeeWithdrawal(MsgInitiateFeeWithdrawal) returns (MsgInitiateFeeWithdrawalResponse);

  // UpdateParams defines a method for updating the x/rollup module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgApplyL1Txs defines the message for applying all L1 system and user deposit txs.
message MsgApplyL1Txs {
  // Array of bytes where each bytes is a eth.Transaction.MarshalBinary tx.
  // The first tx must be the L1 system deposit tx, and the rest are user txs if present.
  repeated bytes tx_bytes = 1;
}

// MsgApplyL1TxsResponse defines the Msg/ApplyL1Txs response type.
message MsgApplyL1TxsResponse {}

// MsgInitiateWithdrawal defines the message for initiating an L2 withdrawal.
message MsgInitiateWithdrawal {
  option (cosmos.msg.v1.signer) = "sender";

  // The cosmos address of the user who wants to withdraw from L2.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The ethereum address on L1 that the user wants to withdraw to.
  string target = 2;
  // The amount of ETH (in wei) that the user wants to withdraw.
  string value = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // Minimum gas limit for executing the message on L1.
  bytes gas_limit = 4;
  // Data to forward to L1 target.
  bytes data = 5;
}

// MsgInitiateWithdrawalResponse defines the Msg/InitiateWithdrawal response type.
message MsgInitiateWithdrawalResponse {}

// MsgInitiateFeeWithdrawal defines the message for initiating an L2 fee withdrawal to the L1 fee recipient address.
message MsgInitiateFeeWithdrawal {
  option (cosmos.msg.v1.signer) = "sender";

  // The signer address of the user initiating the fee withdrawal.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgInitiateFeeWithdrawalResponse defines the Msg/InitiateFeeWithdrawal response type.
message MsgInitiateFeeWithdrawalResponse {}

// MsgUpdateParams defines a Msg for updating the x/rollup module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the admin account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/rollup parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the Msg/MsgUpdateParams response type.
message MsgUpdateParamsResponse {}
