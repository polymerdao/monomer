syntax = "proto3";

package rollup.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

// MsgService defines all tx endpoints for the rollup module.
service MsgService {
  rpc ApplyL1Txs(ApplyL1TxsRequest) returns (ApplyL1TxsResponse);
  rpc InitiateWithdrawal(InitiateWithdrawalRequest) returns (InitiateWithdrawalResponse);
}

// ApplyL1TxsRequest defines a message for all L1 system and user deposit txs
message ApplyL1TxsRequest {
  // Array of bytes where each bytes is a eth.Transaction.MarshalBinary tx.
  // The first tx must be the L1 system deposit tx, and the rest are user txs if present.
  repeated bytes tx_bytes = 1;
}

message ApplyL1TxsResponse {}

// TODO: add validations in the x/rollup module to ensure that the target address and gas limit are valid before burning the users ETH
// InitiateWithdrawalRequest defines a message for all L2 withdrawal txs
message InitiateWithdrawalRequest {
  option (cosmos.msg.v1.signer) = "sender";
  // The cosmos address of the user who wants to withdraw from L2.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // The ethereum address on L1 that the user wants to withdraw to.
  string target = 2;
  // The amount of ETH (in wei) that the user wants to withdraw.
  string value = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  // Minimum gas limit for executing the message on L1.
  bytes gas_limit = 4;
  // Data to forward to L1 target.
  bytes data = 5;
}

message InitiateWithdrawalResponse {}
